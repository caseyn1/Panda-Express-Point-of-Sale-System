import express from "express";
const SalesReportRouter = express.Router();

import client from "../Database.js";

SalesReportRouter.get("/", async (req, res) => {
  try {
    const { name, startDate, endDate } = req.query;

    // Query to fetch the relevant orders and menu items
    let result = await client.query(
      `
      WITH filtered_orders AS (
        -- Step 1: Filter orders within the specified date range
        SELECT o.order_id, o.total
        FROM orders o
        WHERE o.timestamp BETWEEN $2 AND $3
        ),
        item_orders AS (
        -- Step 2: Get all items associated with the filtered orders
        SELECT mo.order_id, mo.menu_item_id, mo.quantity
        FROM menu_orders mo
        JOIN filtered_orders fo ON mo.order_id = fo.order_id
        ),
        relevant_items AS (
        -- Step 3: Fetch details of the specified item or all relevant item types
        SELECT mi.menu_item_id, mi.name, mi.price, mi.item_type
        FROM menu_items mi
        WHERE mi.name = $1 OR mi.item_type IN ('ENTREE', 'SIDE', 'APPETIZER', 'DRINK', 'MEAL')
        ),
        entree_side_revenue AS (
        -- Step 4: Calculate the total number of entrees and sides for each order
        -- Also, calculate the total for meal types directly
        SELECT 
            io.order_id,
            SUM(CASE 
                WHEN ri.item_type = 'ENTREE' THEN io.quantity
                ELSE 0 
            END) AS total_entrees,
            SUM(CASE 
                WHEN ri.item_type = 'SIDE' THEN io.quantity
                ELSE 0 
            END) AS total_sides,
            SUM(CASE 
                WHEN ri.item_type = 'MEAL' THEN ri.price * io.quantity
                ELSE 0
            END) AS entree_side_total -- Only sum up meal prices
        FROM item_orders io
        JOIN relevant_items ri ON io.menu_item_id = ri.menu_item_id
        GROUP BY io.order_id
        )
        -- Step 5: Calculate the total quantity and revenue for the specified item
        SELECT
        SUM(io.quantity) AS total_quantity, -- Total quantity of the item sold
        SUM(
            CASE
            -- Allocate 60% of the order total to entrees, proportionally divided
            WHEN ri.item_type = 'ENTREE' THEN (esr.entree_side_total * 0.6 * io.quantity / esr.total_entrees)
            -- Allocate 40% of the order total to sides, proportionally divided
            WHEN ri.item_type = 'SIDE' THEN (esr.entree_side_total * 0.4 * io.quantity / esr.total_sides)
            -- For other items (e.g., appetizers, drinks), use their individual price
            ELSE ri.price * io.quantity
            END
        ) AS total_revenue -- Total revenue generated by the item
        FROM item_orders io
        JOIN relevant_items ri ON io.menu_item_id = ri.menu_item_id
        JOIN filtered_orders fo ON io.order_id = fo.order_id
        LEFT JOIN entree_side_revenue esr ON io.order_id = esr.order_id
        WHERE ri.name = $1 -- Filter for the specific item name
        GROUP BY ri.name; -- Group by item name to calculate totals
      `,
      [name, startDate, endDate]
    );

    res.json(result.rows);
  } catch (err) {
    console.error(err.message);
    res.status(500).send("An error occurred while generating the sales report.");
  }
});

export default SalesReportRouter;